"use client"

import { Button } from "@/components/Button"
import { Card } from "@/components/Card"
import { LoadingSpinner } from "@/components/LoadingSpinner"
import { Modal } from "@/components/Modal"
import {
  ButtonSize,
  ButtonVariant,
  CardPadding,
  ModalSize,
  SpinnerColor,
  SpinnerSize,
} from "@/components/types"
import { ApiError, GenerationStatus, ImageVersion } from "@/types"
import { useRouter } from "next/navigation"
import { use, useCallback, useEffect, useRef, useState } from "react"
import {
  MockCharacter,
  mockCharacters,
  mockSceneImages,
  SceneWithImages,
  simulateDelay,
  simulateGenerationPolling,
} from "./scene-generation.page.mock"

/**
 * Scene Image Generation Page (Parent Mode)
 *
 * Final step where all scene images are generated by combining
 * characters and backgrounds. Parents can review, regenerate,
 * and select versions before completing the story.
 */
export default function SceneGenerationPage({
  params,
}: {
  params: Promise<{ storyId: string }>
}) {
  const router = useRouter()
  const { storyId } = use(params)

  // State management
  const [scenes, setScenes] = useState<SceneWithImages[]>([])
  const [characters, setCharacters] = useState<MockCharacter[]>([])
  const [selectedSceneIds, setSelectedSceneIds] = useState<Set<string>>(
    new Set()
  )
  const [filterStatus, setFilterStatus] = useState<
    "all" | "completed" | "needs_regen"
  >("all")
  const [selectedScene, setSelectedScene] = useState<SceneWithImages | null>(
    null
  )
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isCompletionModalOpen, setIsCompletionModalOpen] = useState(false)
  const [storyTitle, setStoryTitle] = useState("")
  const [showConfetti, setShowConfetti] = useState(false)

  // Loading states
  const [isLoading, setIsLoading] = useState(true)
  const [isBulkGenerating, setIsBulkGenerating] = useState(false)
  const [regeneratingIds, setRegeneratingIds] = useState<Set<string>>(new Set())
  const [error, setError] = useState<string>("")

  // Polling state
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [jobId, setJobId] = useState<string | null>(null)
  const pollCountRef = useRef(0)
  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null)

  /**
   * Load scenes on mount
   */
  useEffect(() => {
    const loadScenes = async () => {
      try {
        setIsLoading(true)
        setError("")

        // TODO: Replace with actual API call
        // const result = await api.scenes.getAllImages(storyId)
        // if (result.success && result.data) {
        //   setScenes(result.data.scenes)
        // }

        // MOCK: Using mock data
        await simulateDelay(800)
        setScenes(mockSceneImages)
        setCharacters(mockCharacters)

        // Auto-generate if no scenes have images yet
        const hasAnyImages = mockSceneImages.some(
          (scene) => scene.imageVersions.length > 0
        )
        if (!hasAnyImages) {
          // Uncomment to auto-generate on load
          // handleGenerateAll()
        }
      } catch (err) {
        const apiErr = err as ApiError
        setError(apiErr.message || "Failed to load scenes. Please try again.")
      } finally {
        setIsLoading(false)
      }
    }

    loadScenes()
  }, [storyId])

  /**
   * Cleanup polling on unmount
   */
  useEffect(() => {
    const pollInterval = pollIntervalRef

    return () => {
      if (pollInterval.current) {
        clearInterval(pollInterval.current)
      }
    }
  }, [])

  /**
   * Poll generation status
   */
  const pollGenerationStatus = useCallback(async () => {
    try {
      // TODO: Replace with actual API call
      // const result = await api.scenes.getGenerationStatus(storyId, jobId || undefined)
      // if (!result.success || !result.data) return

      // MOCK: Simulate polling
      pollCountRef.current += 1
      const mockStatus = simulateGenerationPolling(pollCountRef.current)

      // Update scenes with new status
      setScenes((prev) =>
        prev.map((scene) => {
          const statusItem = mockStatus.scenes.find(
            (s) => s.sceneId === scene.id
          )
          if (!statusItem) return scene

          let newStatus = GenerationStatus.PENDING
          if (statusItem.status === "generating") {
            newStatus = GenerationStatus.GENERATING
          } else if (statusItem.status === "completed") {
            newStatus = GenerationStatus.COMPLETED
          }

          const newVersions = [...scene.imageVersions]
          if (
            statusItem.status === "completed" &&
            statusItem.currentImageUrl &&
            statusItem.currentVersionId
          ) {
            // Add new version if not already present
            const versionExists = newVersions.some(
              (v) => v.versionId === statusItem.currentVersionId
            )
            if (!versionExists && statusItem.currentVersionId) {
              newVersions.push({
                versionId: statusItem.currentVersionId,
                url: statusItem.currentImageUrl,
                generatedAt: new Date().toISOString(),
              })
            }
          }

          return {
            ...scene,
            generationStatus: newStatus,
            imageVersions: newVersions,
            selectedVersionId:
              statusItem.currentVersionId || scene.selectedVersionId,
          }
        })
      )

      // Check if all completed
      if (mockStatus.status === "completed") {
        setIsBulkGenerating(false)
        if (pollIntervalRef.current) {
          clearInterval(pollIntervalRef.current)
          pollIntervalRef.current = null
        }
        pollCountRef.current = 0
      }
    } catch (err) {
      console.error("Error polling generation status:", err)
    }
  }, [])

  /**
   * Start polling for generation status
   */
  const startPolling = useCallback(() => {
    if (pollIntervalRef.current) {
      clearInterval(pollIntervalRef.current)
    }
    pollCountRef.current = 0
    pollIntervalRef.current = setInterval(pollGenerationStatus, 2000)
  }, [pollGenerationStatus])

  /**
   * Generate all scene images
   */
  const handleGenerateAll = async () => {
    try {
      setIsBulkGenerating(true)
      setError("")

      // Update all scenes to generating status
      setScenes((prev) =>
        prev.map((scene) => ({
          ...scene,
          generationStatus:
            scene.generationStatus === GenerationStatus.COMPLETED
              ? scene.generationStatus
              : GenerationStatus.GENERATING,
        }))
      )

      // TODO: Replace with actual API call
      // const result = await api.scenes.generateAllImages(storyId)
      // if (result.success && result.data) {
      //   setJobId(result.data.jobId)
      // }

      // MOCK: Simulate API call
      await simulateDelay(1000)
      setJobId("mock-job-id")

      // Start polling
      startPolling()
    } catch (err) {
      const apiErr = err as ApiError
      setError(
        apiErr.message || "Failed to start generation. Please try again."
      )
      setIsBulkGenerating(false)

      // Reset scenes to pending
      setScenes((prev) =>
        prev.map((scene) => ({
          ...scene,
          generationStatus:
            scene.imageVersions.length > 0
              ? GenerationStatus.COMPLETED
              : GenerationStatus.PENDING,
        }))
      )
    }
  }

  /**
   * Regenerate individual scene
   */
  const handleRegenerate = async (sceneId: string) => {
    try {
      setRegeneratingIds((prev) => new Set(prev).add(sceneId))
      setError("")

      // Update status to generating
      setScenes((prev) =>
        prev.map((scene) =>
          scene.id === sceneId
            ? { ...scene, generationStatus: GenerationStatus.GENERATING }
            : scene
        )
      )

      // TODO: Replace with actual API call
      // const result = await api.scenes.regenerateImage(storyId, sceneId)
      // if (result.success && result.data) {
      //   // Add new version
      //   setScenes(prev => prev.map(scene => {
      //     if (scene.id === sceneId) {
      //       return {
      //         ...scene,
      //         generationStatus: GenerationStatus.COMPLETED,
      //         imageVersions: [...scene.imageVersions, {
      //           versionId: result.data.versionId,
      //           url: result.data.imageUrl,
      //           generatedAt: new Date().toISOString()
      //         }],
      //         selectedVersionId: result.data.versionId
      //       }
      //     }
      //     return scene
      //   }))
      // }

      // MOCK: Simulate regeneration
      await simulateDelay(3000)
      const newVersion: ImageVersion = {
        versionId: `v${Date.now()}`,
        url: `https://picsum.photos/seed/scene-${sceneId}-${Date.now()}/1200/800`,
        generatedAt: new Date().toISOString(),
      }

      setScenes((prev) =>
        prev.map((scene) =>
          scene.id === sceneId
            ? {
                ...scene,
                generationStatus: GenerationStatus.COMPLETED,
                imageVersions: [...scene.imageVersions, newVersion],
                selectedVersionId: newVersion.versionId,
              }
            : scene
        )
      )
    } catch (err) {
      const apiErr = err as ApiError
      setError(
        apiErr.message || "Failed to regenerate scene. Please try again."
      )

      // Reset status
      setScenes((prev) =>
        prev.map((scene) =>
          scene.id === sceneId
            ? {
                ...scene,
                generationStatus:
                  scene.imageVersions.length > 0
                    ? GenerationStatus.COMPLETED
                    : GenerationStatus.PENDING,
              }
            : scene
        )
      )
    } finally {
      setRegeneratingIds((prev) => {
        const newSet = new Set(prev)
        newSet.delete(sceneId)
        return newSet
      })
    }
  }

  /**
   * Regenerate multiple selected scenes
   */
  const handleRegenerateSelected = async () => {
    if (selectedSceneIds.size === 0) return

    try {
      const idsArray = Array.from(selectedSceneIds)
      setRegeneratingIds(new Set(idsArray))
      setError("")

      // Update status to generating for selected scenes
      setScenes((prev) =>
        prev.map((scene) =>
          selectedSceneIds.has(scene.id)
            ? { ...scene, generationStatus: GenerationStatus.GENERATING }
            : scene
        )
      )

      // TODO: Replace with actual API call
      // const result = await api.scenes.regenerateMultiple(storyId, idsArray)
      // if (result.success && result.data) {
      //   setJobId(result.data.jobId)
      //   startPolling()
      // }

      // MOCK: Simulate bulk regeneration
      await simulateDelay(2000)

      // Simulate completion for each selected scene
      for (const sceneId of idsArray) {
        const newVersion: ImageVersion = {
          versionId: `v${Date.now()}-${sceneId}`,
          url: `https://picsum.photos/seed/scene-${sceneId}-${Date.now()}/1200/800`,
          generatedAt: new Date().toISOString(),
        }

        setScenes((prev) =>
          prev.map((scene) =>
            scene.id === sceneId
              ? {
                  ...scene,
                  generationStatus: GenerationStatus.COMPLETED,
                  imageVersions: [...scene.imageVersions, newVersion],
                  selectedVersionId: newVersion.versionId,
                }
              : scene
          )
        )

        // Stagger updates for visual effect
        await simulateDelay(500)
      }

      // Clear selection
      setSelectedSceneIds(new Set())
    } catch (err) {
      const apiErr = err as ApiError
      setError(
        apiErr.message || "Failed to regenerate scenes. Please try again."
      )
    } finally {
      setRegeneratingIds(new Set())
    }
  }

  /**
   * Select scene version
   */
  const handleSelectVersion = async (sceneId: string, versionId: string) => {
    try {
      // Update selected version in state
      setScenes((prev) =>
        prev.map((scene) =>
          scene.id === sceneId
            ? { ...scene, selectedVersionId: versionId }
            : scene
        )
      )

      // TODO: Replace with actual API call
      // await api.scenes.selectVersion(storyId, sceneId, versionId)

      // MOCK: Log selection (in production, this would be saved to backend)
      console.log(`Selected version ${versionId} for scene ${sceneId}`)
    } catch (err) {
      console.error("Error selecting version:", err)
    }
  }

  /**
   * Open scene detail modal
   */
  const handleOpenSceneModal = (scene: SceneWithImages) => {
    setSelectedScene(scene)
    setIsModalOpen(true)
  }

  /**
   * Close scene detail modal
   */
  const handleCloseModal = () => {
    setIsModalOpen(false)
    setSelectedScene(null)
  }

  /**
   * Toggle scene selection
   */
  const handleToggleSelection = (sceneId: string) => {
    setSelectedSceneIds((prev) => {
      const newSet = new Set(prev)
      if (newSet.has(sceneId)) {
        newSet.delete(sceneId)
      } else {
        newSet.add(sceneId)
      }
      return newSet
    })
  }

  /**
   * Select all scenes
   */
  const handleSelectAll = () => {
    const filteredSceneIds = getFilteredScenes().map((scene) => scene.id)
    setSelectedSceneIds(new Set(filteredSceneIds))
  }

  /**
   * Deselect all scenes
   */
  const handleDeselectAll = () => {
    setSelectedSceneIds(new Set())
  }

  /**
   * Get current scene image URL (selected version or latest)
   */
  const getCurrentImageUrl = (scene: SceneWithImages): string | null => {
    if (scene.imageVersions.length === 0) return null

    // Use selected version if available
    if (scene.selectedVersionId) {
      const selectedVersion = scene.imageVersions.find(
        (v) => v.versionId === scene.selectedVersionId
      )
      if (selectedVersion) return selectedVersion.url
    }

    // Fallback to latest version
    return scene.imageVersions[scene.imageVersions.length - 1].url
  }

  /**
   * Get character by ID
   */
  const getCharacter = (characterId: string): MockCharacter | undefined => {
    return characters.find((c) => c.id === characterId)
  }

  /**
   * Check if all scenes are ready
   */
  const isAllReady = (): boolean => {
    return scenes.every(
      (scene) =>
        scene.generationStatus === GenerationStatus.COMPLETED &&
        scene.imageVersions.length > 0
    )
  }

  /**
   * Get filtered scenes
   */
  const getFilteredScenes = (): SceneWithImages[] => {
    const allScenes = scenes

    if (filterStatus === "completed") {
      return allScenes.filter(
        (scene) =>
          scene.generationStatus === GenerationStatus.COMPLETED &&
          scene.imageVersions.length > 0
      )
    } else if (filterStatus === "needs_regen") {
      return allScenes.filter(
        (scene) =>
          scene.generationStatus === GenerationStatus.PENDING ||
          scene.generationStatus === GenerationStatus.FAILED ||
          scene.imageVersions.length === 0
      )
    }

    return allScenes
  }

  /**
   * Handle complete story
   */
  const handleCompleteStory = () => {
    if (!isAllReady()) {
      setError("Please generate all scene images before completing")
      return
    }
    setIsCompletionModalOpen(true)
  }

  /**
   * Confirm and finalize story
   */
  const handleConfirmCompletion = async () => {
    if (!storyTitle.trim()) {
      setError("Please enter a story title")
      return
    }

    try {
      // TODO: Replace with actual API call
      // const result = await api.stories.complete(storyId, { title: storyTitle })
      // if (result.success && result.data) {
      //   setShowConfetti(true)
      //   setTimeout(() => {
      //     router.push(`/story-preview/${storyId}`)
      //   }, 2000)
      // }

      // MOCK: Simulate completion
      await simulateDelay(1000)
      setIsCompletionModalOpen(false)
      setShowConfetti(true)

      // Navigate after confetti animation
      setTimeout(() => {
        // For now, go back to story setup since we don't have a preview page yet
        router.push(`/story-setup`)
      }, 3000)
    } catch (err) {
      const apiErr = err as ApiError
      setError(apiErr.message || "Failed to complete story. Please try again.")
    }
  }

  /**
   * Navigate back to background setup
   */
  const handleBack = () => {
    router.push(`/background-setup/${storyId}`)
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner
            size={SpinnerSize.XLarge}
            color={SpinnerColor.Primary}
            centered
          />
          <p className="mt-6 text-xl text-gray-700 font-semibold">
            Loading scenes...
          </p>
        </div>
      </div>
    )
  }

  const filteredScenes = getFilteredScenes()
  const isReady = isAllReady()
  const hasSelection = selectedSceneIds.size > 0

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-12">
          <div className="text-center mb-6">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-br from-amber-500 to-orange-600 mb-6 shadow-xl">
              <svg
                className="w-10 h-10 text-white"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                />
              </svg>
            </div>
            <h1 className="text-5xl font-extrabold text-gray-900 mb-4 font-heading">
              Scene Images
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
              Generate and review images for all your story scenes
            </p>
          </div>

          {/* Progress Bar */}
          <div className="max-w-2xl mx-auto">
            <div className="bg-white rounded-2xl shadow-xl border-2 border-amber-200 p-6">
              <div className="flex items-center justify-between mb-3">
                <span className="text-sm font-semibold text-gray-700">
                  Progress
                </span>
                <span className="text-2xl font-bold text-amber-600">
                  {
                    scenes.filter(
                      (scene) =>
                        scene.generationStatus === GenerationStatus.COMPLETED &&
                        scene.imageVersions.length > 0
                    ).length
                  }{" "}
                  / {scenes.length}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                <div
                  className="bg-gradient-to-r from-amber-500 to-orange-600 h-3 rounded-full transition-all duration-500"
                  style={{
                    width: `${
                      (scenes.filter(
                        (scene) =>
                          scene.generationStatus ===
                            GenerationStatus.COMPLETED &&
                          scene.imageVersions.length > 0
                      ).length /
                        scenes.length) *
                      100
                    }%`,
                  }}
                />
              </div>
              {isReady && (
                <div className="mt-3 flex items-center justify-center text-green-600 font-bold">
                  <svg
                    className="w-5 h-5 mr-2"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clipRule="evenodd"
                    />
                  </svg>
                  All scenes ready!
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <div
            className="max-w-4xl mx-auto mb-8 bg-red-50 border-l-4 border-red-500 rounded-r-xl shadow-md p-5"
            role="alert"
          >
            <div className="flex items-start">
              <svg
                className="w-6 h-6 text-red-500 mr-3 flex-shrink-0"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
              <div className="flex-1">
                <p className="text-red-800 font-medium">{error}</p>
                <button
                  onClick={() => setError("")}
                  className="mt-2 text-sm text-red-600 hover:text-red-800 font-medium"
                >
                  Dismiss
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Action Bar */}
        <div className="mb-8 flex flex-col sm:flex-row gap-4 items-center justify-between bg-white rounded-xl shadow-lg border-2 border-amber-200 p-5">
          {/* Generate All Button */}
          <div>
            <button
              onClick={handleGenerateAll}
              disabled={isBulkGenerating || isReady}
              className="px-6 py-3 text-base font-bold text-white bg-gradient-to-r from-amber-500 to-orange-600 rounded-xl hover:from-amber-600 hover:to-orange-700 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all inline-flex items-center gap-2"
            >
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 10V3L4 14h7v7l9-11h-7z"
                />
              </svg>
              {isBulkGenerating
                ? "Generating..."
                : isReady
                ? "✓ All Generated"
                : "Generate All Scene Images"}
            </button>
          </div>

          {/* Filter and Bulk Actions */}
          <div className="flex items-center gap-3">
            {/* Filter Dropdown */}
            <select
              value={filterStatus}
              onChange={(e) =>
                setFilterStatus(
                  e.target.value as "all" | "completed" | "needs_regen"
                )
              }
              className="px-3 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all text-sm"
            >
              <option value="all">All Scenes</option>
              <option value="completed">Completed</option>
              <option value="needs_regen">Needs Regeneration</option>
            </select>

            {/* Selection Actions */}
            {hasSelection ? (
              <>
                <span className="text-sm font-medium text-gray-600">
                  {selectedSceneIds.size} selected
                </span>
                <Button
                  variant={ButtonVariant.Secondary}
                  size={ButtonSize.Small}
                  onClick={handleRegenerateSelected}
                  disabled={regeneratingIds.size > 0}
                >
                  <svg
                    className="w-4 h-4 mr-1 inline"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    />
                  </svg>
                  Regenerate Selected
                </Button>
                <button
                  onClick={handleDeselectAll}
                  className="text-sm text-gray-600 hover:text-gray-800 font-medium"
                >
                  Clear
                </button>
              </>
            ) : (
              <button
                onClick={handleSelectAll}
                className="text-sm text-purple-600 hover:text-purple-800 font-medium"
              >
                Select All
              </button>
            )}
          </div>
        </div>

        {/* Scene Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {filteredScenes.map((scene) => {
            const isGenerating =
              scene.generationStatus === GenerationStatus.GENERATING
            const isRegenerating = regeneratingIds.has(scene.id)
            const isFailed = scene.generationStatus === GenerationStatus.FAILED
            const hasImage = scene.imageVersions.length > 0
            const currentImageUrl = getCurrentImageUrl(scene)
            const isSelected = selectedSceneIds.has(scene.id)

            return (
              <Card
                key={scene.id}
                padding={CardPadding.None}
                className={`transition-all ${
                  isSelected ? "ring-4 ring-purple-400" : ""
                }`}
              >
                {/* Checkbox */}
                <div className="absolute top-3 left-3 z-10">
                  <input
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => handleToggleSelection(scene.id)}
                    className="w-5 h-5 text-purple-600 border-2 border-gray-300 rounded focus:ring-2 focus:ring-purple-500 cursor-pointer"
                    aria-label={`Select scene ${scene.sceneNumber}`}
                  />
                </div>

                {/* Image Display */}
                <div
                  className="relative bg-gray-100 aspect-video cursor-pointer"
                  onClick={() => handleOpenSceneModal(scene)}
                >
                  {isGenerating || isRegenerating ? (
                    <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-purple-50 to-pink-50">
                      <div className="text-center">
                        <svg
                          className="animate-spin h-10 w-10 text-purple-600 mx-auto mb-2"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle
                            className="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="4"
                          />
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                          />
                        </svg>
                        <p className="text-purple-600 text-sm font-semibold">
                          Creating...
                        </p>
                      </div>
                    </div>
                  ) : isFailed ? (
                    <div className="absolute inset-0 flex items-center justify-center bg-red-50">
                      <div className="text-center px-4">
                        <svg
                          className="w-12 h-12 text-red-500 mx-auto mb-2"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fillRule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                            clipRule="evenodd"
                          />
                        </svg>
                        <p className="text-red-700 text-sm font-medium">
                          Generation Failed
                        </p>
                      </div>
                    </div>
                  ) : !currentImageUrl ? (
                    <div className="absolute inset-0 flex items-center justify-center bg-gray-50">
                      <div className="text-center px-4">
                        <svg
                          className="w-16 h-16 text-gray-300 mx-auto mb-2"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={1.5}
                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                          />
                        </svg>
                        <p className="text-gray-500 text-sm font-medium">
                          No image yet
                        </p>
                      </div>
                    </div>
                  ) : (
                    <>
                      {/* eslint-disable-next-line @next/next/no-img-element */}
                      <img
                        src={currentImageUrl}
                        alt={scene.title}
                        className="w-full h-full object-cover"
                        loading="lazy"
                      />
                      {/* Click to view overlay */}
                      <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-all flex items-center justify-center opacity-0 hover:opacity-100">
                        <div className="bg-white rounded-full p-3">
                          <svg
                            className="w-6 h-6 text-purple-600"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                            />
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                            />
                          </svg>
                        </div>
                      </div>
                    </>
                  )}

                  {/* Status Badge */}
                  <div className="absolute top-3 right-3">
                    {hasImage && !isGenerating && !isRegenerating ? (
                      <div className="inline-flex items-center px-2 py-1 rounded-full bg-green-500 text-white text-xs font-bold shadow-md">
                        <svg
                          className="w-3 h-3 mr-1"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fillRule="evenodd"
                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            clipRule="evenodd"
                          />
                        </svg>
                        Ready
                      </div>
                    ) : isFailed ? (
                      <div className="inline-flex items-center px-2 py-1 rounded-full bg-red-500 text-white text-xs font-bold shadow-md">
                        Failed
                      </div>
                    ) : null}
                  </div>

                  {/* Version Count Badge */}
                  {hasImage && scene.imageVersions.length > 1 && (
                    <div className="absolute bottom-3 right-3">
                      <div className="inline-flex items-center px-2 py-1 rounded-full bg-black bg-opacity-70 text-white text-xs font-semibold">
                        <svg
                          className="w-3 h-3 mr-1"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fillRule="evenodd"
                            d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                            clipRule="evenodd"
                          />
                        </svg>
                        {scene.imageVersions.length}
                      </div>
                    </div>
                  )}
                </div>

                {/* Card Content */}
                <div className="p-4">
                  {/* Scene Title */}
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="inline-flex items-center justify-center w-6 h-6 rounded-full bg-purple-100 text-purple-700 text-xs font-bold">
                          {scene.sceneNumber}
                        </span>
                        <h3 className="text-lg font-bold text-gray-900">
                          {scene.title}
                        </h3>
                      </div>
                      <p className="text-sm text-gray-600 line-clamp-2">
                        {scene.text}
                      </p>
                    </div>
                  </div>

                  {/* Characters */}
                  <div className="flex items-center gap-2 mb-3">
                    <span className="text-xs font-semibold text-gray-500">
                      Characters:
                    </span>
                    <div className="flex -space-x-2">
                      {scene.characterIds.map((charId) => {
                        const character = getCharacter(charId)
                        if (!character) return null
                        return (
                          <div
                            key={charId}
                            className="w-8 h-8 rounded-full border-2 border-white overflow-hidden bg-gray-100"
                            title={character.name}
                          >
                            {/* eslint-disable-next-line @next/next/no-img-element */}
                            <img
                              src={character.imageUrl}
                              alt={character.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )
                      })}
                    </div>
                  </div>

                  {/* Background */}
                  <div className="mb-3">
                    <span className="text-xs font-semibold text-gray-500">
                      Location:{" "}
                    </span>
                    <span className="text-xs text-gray-700">
                      {scene.location}
                    </span>
                  </div>

                  {/* Action Button */}
                  <div>
                    {hasImage ? (
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          handleRegenerate(scene.id)
                        }}
                        disabled={isRegenerating || isGenerating}
                        className="w-full inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-purple-700 bg-purple-50 hover:bg-purple-100 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-colors"
                      >
                        <svg
                          className="w-4 h-4 mr-2"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                          />
                        </svg>
                        Regenerate
                      </button>
                    ) : (
                      !isGenerating &&
                      !isFailed && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation()
                            handleRegenerate(scene.id)
                          }}
                          className="w-full inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-lg transition-colors"
                        >
                          <svg
                            className="w-4 h-4 mr-2"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M13 10V3L4 14h7v7l9-11h-7z"
                            />
                          </svg>
                          Generate
                        </button>
                      )
                    )}
                    {isFailed && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          handleRegenerate(scene.id)
                        }}
                        className="w-full inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
                      >
                        <svg
                          className="w-4 h-4 mr-2"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                          />
                        </svg>
                        Retry
                      </button>
                    )}
                  </div>
                </div>
              </Card>
            )
          })}
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center max-w-4xl mx-auto pt-8 border-t-2 border-amber-200">
          <button
            onClick={handleBack}
            disabled={isBulkGenerating}
            className="px-6 py-3 text-base font-semibold text-gray-700 bg-white border-2 border-gray-300 rounded-xl hover:bg-gray-50 hover:border-amber-400 hover:text-amber-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center gap-2"
          >
            <svg
              className="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            Back to Backgrounds
          </button>

          <button
            onClick={handleCompleteStory}
            disabled={!isReady || isBulkGenerating}
            className="px-8 py-3 text-base font-bold text-white bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl hover:from-green-600 hover:to-emerald-700 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center gap-3"
          >
            <span>Complete Story</span>
            <svg
              className="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 13l4 4L19 7"
              />
            </svg>
          </button>
        </div>
      </div>

      {/* Bulk Generation Loading Overlay */}
      {isBulkGenerating && (
        <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl p-10 max-w-md w-full text-center">
            <LoadingSpinner
              size={SpinnerSize.Large}
              color={SpinnerColor.Primary}
              centered
            />
            <h3 className="mt-6 text-2xl font-bold text-gray-900">
              Bringing Your Story to Life...
            </h3>
            <div className="mt-4 text-4xl font-bold text-purple-600">
              {
                scenes.filter(
                  (scene) =>
                    scene.generationStatus === GenerationStatus.COMPLETED
                ).length
              }{" "}
              / {scenes.length}
            </div>
            <p className="mt-3 text-gray-600">
              AI is creating magic moments...
            </p>
            <p className="mt-2 text-sm text-gray-500">
              This may take a few minutes
            </p>
          </div>
        </div>
      )}

      {/* Scene Detail Modal */}
      {selectedScene && (
        <Modal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          title={`Scene ${selectedScene.sceneNumber}: ${selectedScene.title}`}
          size={ModalSize.XLarge}
          footer={
            <>
              <Button
                variant={ButtonVariant.Secondary}
                size={ButtonSize.Medium}
                onClick={handleCloseModal}
              >
                Close
              </Button>
              <Button
                variant={ButtonVariant.Primary}
                size={ButtonSize.Medium}
                onClick={() => {
                  handleRegenerate(selectedScene.id)
                  handleCloseModal()
                }}
                disabled={
                  regeneratingIds.has(selectedScene.id) ||
                  selectedScene.generationStatus === GenerationStatus.GENERATING
                }
              >
                <svg
                  className="w-4 h-4 mr-2 inline"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  />
                </svg>
                Regenerate
              </Button>
            </>
          }
        >
          <div className="space-y-6">
            {/* Full Scene Text */}
            <div>
              <h4 className="text-sm font-semibold text-gray-700 mb-2">
                Scene Text
              </h4>
              <p className="text-gray-700 leading-relaxed">
                {selectedScene.text}
              </p>
            </div>

            {/* Large Image Display */}
            <div>
              <h4 className="text-sm font-semibold text-gray-700 mb-2">
                Scene Image
              </h4>
              <div className="relative bg-gray-100 rounded-xl overflow-hidden">
                {getCurrentImageUrl(selectedScene) ? (
                  // eslint-disable-next-line @next/next/no-img-element
                  <img
                    src={getCurrentImageUrl(selectedScene)!}
                    alt={selectedScene.title}
                    className="w-full h-auto"
                  />
                ) : (
                  <div className="flex items-center justify-center h-96 bg-gray-50">
                    <div className="text-center">
                      <svg
                        className="w-20 h-20 text-gray-300 mx-auto mb-3"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={1.5}
                          d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                      <p className="text-gray-500 font-medium">
                        No image generated yet
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Version History */}
            {selectedScene.imageVersions.length > 0 && (
              <div>
                <h4 className="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                  <svg
                    className="w-4 h-4 mr-2"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Version History ({selectedScene.imageVersions.length})
                </h4>
                <div className="flex gap-4 overflow-x-auto pb-3 px-1">
                  {selectedScene.imageVersions.map((version, index) => (
                    <button
                      key={version.versionId}
                      onClick={() =>
                        handleSelectVersion(selectedScene.id, version.versionId)
                      }
                      className={`flex-shrink-0 relative rounded-lg overflow-hidden transition-all ${
                        version.versionId === selectedScene.selectedVersionId
                          ? "border-4 border-purple-500 ring-4 ring-purple-200 scale-105"
                          : "border-3 border-gray-300 hover:border-purple-300 opacity-70 hover:opacity-100"
                      }`}
                      style={{ width: "160px", height: "120px" }}
                    >
                      {/* eslint-disable-next-line @next/next/no-img-element */}
                      <img
                        src={version.url}
                        alt={`Version ${
                          selectedScene.imageVersions.length - index
                        }`}
                        className="w-full h-full object-cover"
                      />
                      <div
                        className={`absolute bottom-0 left-0 right-0 text-white text-sm py-1 text-center font-semibold ${
                          version.versionId === selectedScene.selectedVersionId
                            ? "bg-purple-600"
                            : "bg-black bg-opacity-60"
                        }`}
                      >
                        Version {selectedScene.imageVersions.length - index}
                      </div>
                      {version.versionId ===
                        selectedScene.selectedVersionId && (
                        <div className="absolute top-2 right-2 bg-purple-600 rounded-full p-1">
                          <svg
                            className="w-4 h-4 text-white"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                          >
                            <path
                              fillRule="evenodd"
                              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                              clipRule="evenodd"
                            />
                          </svg>
                        </div>
                      )}
                    </button>
                  ))}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Click a version to select it for your story
                </p>
              </div>
            )}

            {/* Scene Details */}
            <div className="grid grid-cols-2 gap-4 pt-4 border-t border-gray-200">
              <div>
                <h5 className="text-xs font-semibold text-gray-500 mb-1">
                  Location
                </h5>
                <p className="text-sm text-gray-700">
                  {selectedScene.location}
                </p>
              </div>
              <div>
                <h5 className="text-xs font-semibold text-gray-500 mb-1">
                  Scene Type
                </h5>
                <p className="text-sm text-gray-700 capitalize">
                  {selectedScene.type.replace("_", " ")}
                </p>
              </div>
            </div>
          </div>
        </Modal>
      )}

      {/* Completion Modal */}
      <Modal
        isOpen={isCompletionModalOpen}
        onClose={() => setIsCompletionModalOpen(false)}
        title="Complete Your Story"
        size={ModalSize.Medium}
        footer={
          <>
            <Button
              variant={ButtonVariant.Secondary}
              size={ButtonSize.Medium}
              onClick={() => setIsCompletionModalOpen(false)}
            >
              Cancel
            </Button>
            <Button
              variant={ButtonVariant.Primary}
              size={ButtonSize.Medium}
              onClick={handleConfirmCompletion}
              disabled={!storyTitle.trim()}
            >
              Complete Story
            </Button>
          </>
        }
      >
        <div className="space-y-6">
          <div>
            <p className="text-gray-700 mb-4">
              Your story is almost ready! Give it a final title that will appear
              for children reading your story.
            </p>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Story Title
            </label>
            <input
              type="text"
              value={storyTitle}
              onChange={(e) => setStoryTitle(e.target.value)}
              placeholder="Enter a captivating title..."
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all text-gray-700"
              maxLength={100}
              autoFocus
            />
            <p className="mt-2 text-xs text-gray-500">
              {storyTitle.length} / 100 characters
            </p>
          </div>

          <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-4">
            <div className="flex items-start">
              <svg
                className="w-6 h-6 text-purple-600 mr-3 flex-shrink-0 mt-0.5"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                  clipRule="evenodd"
                />
              </svg>
              <div>
                <p className="text-purple-900 font-semibold mb-1">
                  What happens next?
                </p>
                <ul className="text-purple-800 text-sm space-y-1">
                  <li>✓ Your story will be saved and finalized</li>
                  <li>✓ Children can start reading and playing</li>
                  <li>✓ You can preview it in child mode</li>
                  <li>✓ You can always create more stories!</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </Modal>

      {/* Confetti Animation */}
      {showConfetti && (
        <div className="fixed inset-0 pointer-events-none z-50 flex items-center justify-center">
          <div className="bg-white rounded-3xl shadow-2xl p-12 text-center animate-bounce">
            <div className="text-6xl mb-4">🎉</div>
            <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600 mb-2">
              Story Complete!
            </h2>
            <p className="text-gray-600 text-lg">
              Your magical story is ready to share!
            </p>
          </div>
        </div>
      )}
    </div>
  )
}
